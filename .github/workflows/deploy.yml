name: Build and Deploy

on: [push]

env:
  CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
  CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  CI_PROJECT_NAME: ${{ github.event.repository.name }}
  TELEGRAM_PORT: 5450


jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    services:
      docker:
        image: docker:19.03.12
        options: --privileged  # Required for Docker-in-Docker
        ports:
          - 2375:2375

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Start Docker daemon
        run: |
          echo "Image Tag: ${{ env.CI_REGISTRY_USER }}/${{ env.CI_PROJECT_NAME }}:latest"
          nohup dockerd --host=tcp://0.0.0.0:2375 --host=unix:///var/run/docker.sock &
          sleep 20
          docker info
        env:
          DOCKER_TLS_CERTDIR: ""

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.CI_REGISTRY_USER }}
          password: ${{ env.CI_REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build --build-arg BOT_TOKEN=${{ env.BOT_TOKEN }} \
                       -t ${{ env.CI_REGISTRY_USER }}/${{ env.CI_PROJECT_NAME }}:latest .
          docker push ${{ env.CI_REGISTRY_USER }}/${{ env.CI_PROJECT_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: build

    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to server
        run: |
          sshpass -p "${{ env.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          docker login -u '${{ env.CI_REGISTRY_USER }}' -p '${{ env.CI_REGISTRY_PASSWORD }}'
          docker pull ${{ env.CI_REGISTRY_USER }}/${{ env.CI_PROJECT_NAME }}:latest
          docker stop ${{ env.CI_PROJECT_NAME }} || true
          docker rm ${{ env.CI_PROJECT_NAME }} || true
          docker run -d -p ${{ env.TELEGRAM_PORT }}:${{ env.TELEGRAM_PORT }} --device=/dev/bus/usb:/dev/bus/usb --name ${{ env.CI_PROJECT_NAME }} -e BOT_TOKEN=${{ env.BOT_TOKEN }} ${{ env.CI_REGISTRY_USER }}/${{ env.CI_PROJECT_NAME }}:latest
          images=\$(docker images -f 'dangling=true' -q)
          if [ -n \"\$images\" ]; then
            docker rmi -f \$images
          fi"
          nohup sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker logs -f telegram > /home/sigma/logs/bot.log" &
